from types import *
from sqlite3 import Row
import random
from datetime import datetime
import common
import usermanager
import logmanager
import activitymanager

def run_tests():
	try:
		assert usermanager.create_users_if_dne()
	except AssertionError as e:
		print("assert usermanager.create_users_if_dne() failed")
	except Exception as e:
		print(e)
	
	# Generates random username
	random.seed(datetime.now().microsecond)
	username = random.randint(0, 10000)

	try:
		assert usermanager.insert_user(username)
	except AssertionError as e:
		print("assert usermanager.insert_user() failed")
	except Exception as e:
		print(e)

	try:
		assert usermanager.user_exists(username)
	except AssertionError as e:
		print("assert usermanager.user_exists('{}') failed".format(username))
	except Exception as e:
		print(e)
	
	try:
		assert not usermanager.user_exists("blablabla")
	except AssertionError as e:
		print("assert not usermanager.user_exists('blablabla') failed")
	except Exception as e:
		print(e)

	try:
		assert not usermanager.wc_info_filled(username)
	except AssertionError as e:
		print("assert not usermanager.wc_info_filled('{}') failed".format(username))
	except Exception as e:
		print(e)

	try:
		assert usermanager.update_wc_info(username, "daily", "11111", "3590sxeioel34ios34109")
	except AssertionError as e:
		print('assert usermanager.update_wc_info("{}", "daily", "11111", "3590sxeioel34ios34109") failed'.format(username))
	except Exception as e:
		print(e)

	try:
		assert usermanager.wc_info_filled(username)
	except AssertionError as e:
		print('assert usermanager.wc_info_filled("{}") failed'.format(username))
	except Exception as e:
		print(e)

	try:
		assert not usermanager.fb_info_filled(username)
	except AssertionError as e:
		print('assert not usermanager.fb_info_filled("{}") failed'.format(username))
	except Exception as e:
		print(e)

	try:
		assert usermanager.update_fb_info(username, "sl35902nej3390fh493wj394hlhk039")
	except AssertionError as e:
		print('assert usermanager.update_fb_info("{}", "sl35902nej3390fh493wj394hlhk039") failed'.format(username))
	except Exception as e:
		print(e)

	try:
		assert usermanager.fb_info_filled(username)
	except AssertionError as e:
		print('assert usermanager.fb_info_filled("{}") failed'.format(username))
	except Exception as e:
		print(e)

	try:
		assert not usermanager.get_users() is NoneType
	except AssertionError as e:
		print('assert not usermanager.get_users() is NoneType failed')
	except Exception as e:
		print(e)

	try:
		assert not len(usermanager.get_users()) == 0
	except AssertionError as e:
		print('assert not len(usermanager.get_users()) == 0 failed')
	except Exception as e:
		print(e)

	user = usermanager.get_user(username)
	
	try:
		assert isinstance(user, Row)
	except AssertionError as e:
		print('assert isinstance(user, Row) failed')
	except Exception as e:
		print(e)
	
	try:
		assert not user["id"] is NoneType
	except AssertionError as e:
		print('assert not user["id"] is NoneType failed')
	except Exception as e:
		print(e)
	
	try:
		assert not user["username"] is NoneType
	except AssertionError as e:
		print('assert not user["username"] is NoneType failed')
	except Exception as e:
		print(e)
	
	try:
		assert not user["registered_on"] is NoneType
	except AssertionError as e:
		print('assert not user["registered_on"] is NoneType failed')
	except Exception as e:
		print(e)
	
	try:
		assert not user["goal_period"] is NoneType
	except AssertionError as e:
		print('assert not user["goal_period"] is NoneType failed')
	except Exception as e:
		print(e)
	
	try:
		assert not user["wc_id"] is NoneType
	except AssertionError as e:
		print('assert not user["wc_id"] is NoneType failed')
	except Exception as e:
		print(e)
	
	try:
		assert not user["wc_token"] is NoneType
	except AssertionError as e:
		print('assert not user["wc_token"] is NoneType failed')
	except Exception as e:
		print(e)
	
	try:
		assert not user["fb_token"] is NoneType
	except AssertionError as e:
		print('assert not user["fb_token"] is NoneType failed')
	except Exception as e:
		print(e)

	try:
		assert logmanager.create_logs_if_dne()
	except AssertionError as e:
		print('assert logmanager.create_logs_if_dne() failed')
	except Exception as e:
		print(e)
	
	try:
		assert logmanager.insert_log(user["id"], 0.5, 500000)
	except AssertionError as e:
		print('assert logmanager.insert_log(user["id"], 0.5, 500000) failed')
	except Exception as e:
		print(e)

	try:
		assert not logmanager.get_logs() is NoneType
	except AssertionError as e:
		print('assert not logmanager.get_logs() is NoneType failed')
	except Exception as e:
		print(e)
	
	try:
		assert not logmanager.get_logs(user_id=user["id"]) is NoneType
	except AssertionError as e:
		print('assert not logmanager.get_logs(user_id=user["id"]) is NoneType failed')
	except Exception as e:
		print(e)

	# Weekly activity, unexpired, arbitrary time
	activity1_id = random.randint(1000, 5000)
	activity1_json = {
		"activityId": activity1_id,
		"dateModified": datetime(2018, 1, 12, 12, 0).strftime(common.WC_FORMAT),
		"dateStart": datetime(2018, 1, 12, 12, 0).strftime(common.WC_FORMAT),
		"duration": 60,
		"repeat": "weekly",
		"repeatEnd": datetime(2019, 1, 12, 13, 0)
	}

	# One-time event, expired, arbitrary time
	activity2_id = random.randint(1000, 5000)
	activity2_json = {
		"activityId": activity2_id,
		"dateModified": datetime(2018, 2, 28, 12, 35).strftime(common.WC_FORMAT),
		"dateStart": datetime(2018, 2, 28, 18, 30).strftime(common.WC_FORMAT),
		"duration": 60,
		"repeat": "never",
		"repeatEnd": None
	}

	# Daily activity, no expiration, happening now
	activity3_id = random.randint(1000, 5000)
	activity3_json = {
		"activityId": activity3_id,
		"dateModified": datetime(2018, 1, 12, 12, 0).strftime(common.WC_FORMAT),
		"dateStart": datetime.now().strftime(common.WC_FORMAT),
		"duration": 30,
		"repeat": "daily",
		"repeatEnd": None
	}

	# One-time event, happening now
	activity4_id = random.randint(1000, 5000)
	activity4_json = {
		"activityId": activity4_id,
		"dateModified": datetime(2018, 1, 12, 12, 0).strftime(common.WC_FORMAT),
		"dateStart": datetime.now().strftime(common.WC_FORMAT),
		"duration": 60,
		"repeat": "never",
		"repeatEnd": None
	}

	try:
		assert activitymanager.create_activities_if_dne()
	except AssertionError as e:
		print('assert activitymanager.create_activities_if_dne() failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.insert_activity(user["id"], activity1_json)
	except AssertionError as e:
		print('assert activitymanager.insert_activity(user["id"], activity1_json) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.activity_exists(activity1_id)
	except AssertionError as e:
		print('assert activitymanager.activity_exists(activity1_id) failed')
	except Exception as e:
		print(e)

	try:
		assert not activitymanager.insert_activity(user["id"], activity2_json)
	except AssertionError as e:
		print('assert not activitymanager.insert_activity(user["id"], activity2_json) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.activity_exists(activity2_id)
	except AssertionError as e:
		print('assert activitymanager.activity_exists(activity2_id) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.insert_activity(user["id"], activity3_json)
	except AssertionError as e:
		print('assert activitymanager.insert_activity(user["id"], activity3_json) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.activity_exists(activity3_id)
	except AssertionError as e:
		print('assert activitymanager.activity_exists(activity3_id) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.insert_activity(user["id"], activity4_json)
	except AssertionError as e:
		print('assert activitymanager.insert_activity(user["id"], activity4_json) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.activity_exists(activity4_id)
	except AssertionError as e:
		print('assert activitymanager.activity_exists(activity4_id) failed')
	except Exception as e:
		print(e)

	activity1_json["duration"] = 120
	activity1_json["dateModified"] = datetime.now().strftime(common.WC_FORMAT)
	try:
		assert activitymanager.insert_activity(user["id"], activity1_json)
	except AssertionError as e:
		print('assert activitymanager.insert_activity(user["id"], activity1_json) failed')
	except Exception as e:
		print(e)

	try:
		assert not activitymanager.insert_activity(user["id"], activity3_json)
	except AssertionError as e:
		print('assert activitymanager.insert_activity(user["id"], activity3_json) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.get_users_with_current_activities()[0] == user["id"]
	except AssertionError as e:
		print('assert activitymanager.get_users_with_current_activities()[0] == user["id"] failed')
	except Exception as e:
		print(e)

	try:
		assert len(activitymanager.get_activities()) > 0
	except AssertionError as e:
		print('assert len(activitymanager.get_activities()) > 0 failed')
	except Exception as e:
		print(e)

	try:
		assert usermanager.delete_user(user["id"])
	except AssertionError as e:
		print('assert usermanager.delete_user(user["id"]) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.delete_activity(activity1_id)
	except AssertionError as e:
		print('assert activitymanager.delete_activity(activity1_id) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.delete_activity(activity2_id)
	except AssertionError as e:
		print('assert activitymanager.delete_activity(activity2_id) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.delete_activity(activity3_id)
	except AssertionError as e:
		print('assert activitymanager.delete_activity(activity3_id) failed')
	except Exception as e:
		print(e)

	try:
		assert activitymanager.delete_activity(activity4_id)
	except AssertionError as e:
		print('assert activitymanager.delete_activity(activity4_id) failed')
	except Exception as e:
		print(e)

# Actually runs the tests
run_tests()